import { createReducer } from "@reduxjs/toolkit";
import sprintActionsObj from "../sprints/sprintsActions";
import taskActionsObj from "../tasks/tasksActions";

import {
  signupRequest,
  signupSuccess,
  signupError,
  logInRequest,
  logInSuccess,
  logInError,
  logoutRequest,
  logoutSuccess,
  logoutError,
  gettingCurrentUserRequest,
  gettingCurrentUserSuccess,
  gettingCurrentUserError,
  resetPassRequest,
  resetPassSuccess,
  resetPassError,
} from "../auth/authActions";

import {
  addProjectRequest,
  addProjectSuccess,
  addProjectError,
  deleteProjectRequest,
  deleteProjectSuccess,
  deleteProjectError,
  byIdRequest,
  byIdSuccess,
  byIdError,
  changeProjectNameRequest,
  changeProjectNameSuccess,
  changeProjectNameError,
  changeProjectDescRequest,
  changeProjectDescSuccess,
  changeProjectDescError,
} from "../projects/projectActions";

const loadingReducer = createReducer(false, {
  [signupRequest]: () => true,
  [signupSuccess]: () => false,
  [signupError]: () => false,
  [logInRequest]: () => true,
  [logInSuccess]: () => false,
  [logInError]: () => false,
  [logoutRequest]: () => true,
  [logoutSuccess]: () => false,
  [logoutError]: () => false,
  [gettingCurrentUserRequest]: () => true,
  [gettingCurrentUserSuccess]: () => false,
  [gettingCurrentUserError]: () => false,
  [resetPassRequest]: () => true,
  [resetPassSuccess]: () => false,
  [resetPassError]: () => false,
  [addProjectRequest]: () => true,
  [addProjectSuccess]: () => false,
  [addProjectError]: () => false,
  [deleteProjectRequest]: () => true,
  [deleteProjectSuccess]: () => false,
  [deleteProjectError]: () => false,
  [byIdRequest]: () => true,
  [byIdSuccess]: () => false,
  [byIdError]: () => false,
  [changeProjectNameRequest]: () => true,
  [changeProjectNameSuccess]: () => false,
  [changeProjectNameError]: () => false,
  [changeProjectDescRequest]: () => true,
  [changeProjectDescSuccess]: () => false,
  [changeProjectDescError]: () => false,
  [sprintActionsObj.createSuccess]: () => false,
  [sprintActionsObj.createRequest]: () => true,
  [sprintActionsObj.createError]: () => false,
  [sprintActionsObj.deleteRequest]: () => true,
  [sprintActionsObj.deleteSuccess]: () => false,
  [sprintActionsObj.deleteError]: () => false,
  [sprintActionsObj.sprintChangeNameRequest]: () => true,
  [sprintActionsObj.sprintChangeNameSuccess]: () => false,
  [sprintActionsObj.sprintChangeNameError]: () => false,
  [sprintActionsObj.sprintByIdRequest]: () => true,
  [sprintActionsObj.sprinByIdSuccess]: () => false,
  [sprintActionsObj.sprinByIdError]: () => false,
  [taskActionsObj.createTaskRequest]: () => true,
  [taskActionsObj.createTaskSuccess]: () => false,
  [taskActionsObj.createTaskError]: () => false,
  [taskActionsObj.deleteTaskRequest]: () => true,
  [taskActionsObj.deleteTaskSuccess]: () => false,
  [taskActionsObj.deleteTaskError]: () => false,
  [taskActionsObj.changeTaskNameRequest]: () => true,
  [taskActionsObj.changeTaskNameSuccess]: () => false,
  [taskActionsObj.changeTaskNameError]: () => false,
  [taskActionsObj.getTaskbyIdRequest]: () => true,
  [taskActionsObj.getTaskbyIdSuccess]: () => false,
  [taskActionsObj.getTaskbyIdError]: () => false,
  [taskActionsObj.updateTaskTimeRequest]: () => true,
  [taskActionsObj.updateTaskTimeSuccess]: () => false,
  [taskActionsObj.updateTaskTimeError]: () => false,
  [taskActionsObj.searchTaskByNameRequest]: () => true,
  [taskActionsObj.searchTaskByNameSucces]: () => false,
  [taskActionsObj.searchTaskByNameError]: () => false,
});

export default loadingReducer;
